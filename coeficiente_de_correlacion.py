# -*- coding: utf-8 -*-
"""Coeficiente_de_correlacion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DcRbro7r66TCR0bkYruGiT4Vtx9qjS8g

## **Cálculo del coeficiente de correlación**

***Presenta: Vanessa Cristell Torres López***
"""

import numpy as np

# Función para calcular la covarianza usando momentos centrales conjuntos
def covarianza_momentos_conjuntos(X, Y):
    """
    Calcula la covarianza entre X y Y usando momentos centrales conjuntos.
    :param X: Muestra de la variable aleatoria X
    :param Y: Muestra de la variable aleatoria Y
    :return: Covarianza entre X y Y
    """
    E_X = np.mean(X)
    E_Y = np.mean(Y)
    momento_11 = np.mean((X - E_X) * (Y - E_Y))  # Momento central conjunto
    return momento_11

# Función para calcular el coeficiente de correlación
def coeficiente_correlacion(X, Y):
    """
    Calcula el coeficiente de correlación de Pearson entre X y Y.
    :param X: Muestra de la variable aleatoria X
    :param Y: Muestra de la variable aleatoria Y
    :return: Coeficiente de correlación entre X y Y
    """
    # Calcular la covarianza
    cov_XY = covarianza_momentos_conjuntos(X, Y)

    # Calcular las desviaciones estándar de X y Y (momentos centrales de segundo orden)
    std_X = np.std(X, ddof=0)
    std_Y = np.std(Y, ddof=0)

    # Coeficiente de correlación de Pearson
    correlacion = cov_XY / (std_X * std_Y)

    return correlacion

# Generar muestras aleatorias de dos distribuciones normales
np.random.seed(42)  # Para reproducibilidad
X = np.random.normal(loc=5, scale=2, size=1000)
Y = np.random.normal(loc=3, scale=1, size=1000)

# Calcular el coeficiente de correlación
correlacion = coeficiente_correlacion(X, Y)

print("Coeficiente de correlación:", correlacion)

# Verificar el coeficiente de correlación con la función de numpy
correlacion_numpy = np.corrcoef(X, Y)[0, 1]
print("Coeficiente de correlación (numpy):", correlacion_numpy)