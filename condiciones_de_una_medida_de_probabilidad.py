# -*- coding: utf-8 -*-
"""Condiciones_de_una_medida_de_probabilidad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JHX1yX1s7Puy4NpqBT3vFpVIgVcy20Ao

## **Demostración de las condiciones de una medida de probabilidad**

***Presenta: Vanessa Cristell Torres López***
"""

# Espacio muestral
Omega = {1, 2, 3, 4, 5}

# Definimos una sigma-álgebra (colección de subconjuntos) sobre Omega
F = [
    set(),                # Conjunto vacío
    {1, 2},               # Subconjunto
    {3, 4, 5},            # Subconjunto
    {1, 2, 3, 4, 5}       # Omega
]

# Definimos una función de probabilidad P
def P(A):
    probabilities = {
        frozenset(): 0,               # P(conjunto vacío) = 0
        frozenset({1, 2}): 0.4,       # P({1, 2}) = 0.4
        frozenset({3, 4, 5}): 0.6,    # P({3, 4, 5}) = 0.6
        frozenset({1, 2, 3, 4, 5}): 1 # P(Omega) = 1
    }
    return probabilities[frozenset(A)]

# Función para verificar las tres propiedades de la medida de probabilidad

def check_probability_measure(Omega, F):
    # Condición 1: P(A) >= 0 para todo A en F
    non_negative = True
    for A in F:
        if P(A) < 0:
            non_negative = False
            print(f"Condición 1 fallida: P({A}) < 0")
    if non_negative:
        print("Condición 1 cumplida: P(A) >= 0 para todo A en F")

    # Condición 2: P(Omega) = 1
    if P(Omega) == 1:
        print("Condición 2 cumplida: P(Omega) = 1")
    else:
        print(f"Condición 2 fallida: P(Omega) = {P(Omega)}")

    # Condición 3: P(unión de A_i disjuntos) = suma de P(A_i)
    A1 = {1, 2}
    A2 = {3, 4, 5}
    union_disjoint = A1.union(A2)

    # Verificamos que A1 y A2 sean disjuntos
    if A1.isdisjoint(A2):
        if P(union_disjoint) == P(A1) + P(A2):
            print("Condición 3 cumplida: P(A1 ∪ A2) = P(A1) + P(A2) para conjuntos disjuntos")
        else:
            print(f"Condición 3 fallida: P(A1 ∪ A2) = {P(union_disjoint)}, pero P(A1) + P(A2) = {P(A1) + P(A2)}")
    else:
        print("A1 y A2 no son disjuntos, no se puede verificar la condición 3")

# Verificamos las tres condiciones
check_probability_measure(Omega, F)